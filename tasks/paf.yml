# vim: set filetype=yaml expandtab tabstop=2 shiftwidth=2 softtabstop=2 background=dark :


#- name: reconfigure database
#  copy: src=postgresql.conf dest="/var/lib/pgsql/9.5/data/postgresql.conf"
#  notify: restart postgresql
#  args:
#    owner: postgres
#    group: postgres
#    mode:  0644
#
## netreba nutne
#- meta: flush_handlers

- name: create virtual IP resource
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  pcs_resource: command=create resource_id="{{ postgres_ha_cluster_vip_res_name }}" type=ocf:heartbeat:IPaddr2
  args:
    options:
      ip: "{{ postgres_ha_cluster_vip }}"
      cidr_netmask: "{{ postgres_ha_cluster_vip_mask }}"
    operations:
      - action: monitor
        options:
          interval: 10s


#- name: prepare install of DB failover agent
#  copy: src=resource-agents-paf-2.1~rc1-1.noarch.rpm dest=/root/resource-agents-paf-2.1~rc1-1.noarch.rpm
#
#- name: install DB failover agent
#  yum:
#    name: /root/resource-agents-paf-2.1~rc1-1.noarch.rpm
#    state: present

- name: install DB failover agent
  yum:
    name: https://github.com/dalibo/PAF/releases/download/v2.1.0/resource-agents-paf-2.1.0-1.noarch.rpm
    state: present

#- name: apply patches to DB failover agent
#  copy: src=pgsqlms dest=/usr/lib/ocf/resource.d/heartbeat/pgsqlms
#  args:
#    owner: root
#    group: root
#    mode:  0555

- name: prepare DB recovery config
  template: src=recovery.conf.pcmk.j2 dest="{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
  args:
    owner: postgres
    group: postgres
    mode:  0644

- name: stop database for clustering
  service: name="{{ postgres_ha_pg_systemd_svcname }}" state=stopped enabled=false

- name: create database cluster resource
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  pcs_resource: command=create resource_id="{{ postgres_ha_cluster_pg_res_name }}" type=ocf:heartbeat:pgsqlms
  args:
    disabled: True
    options:
      bindir: "{{ postgres_ha_pg_bindir }}"
      pgdata: "{{ postgres_ha_pg_data }}"
      pgport: "{{ postgres_ha_pg_port }}"
      recovery_template: "{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
    operations:
      - action: start
        options:
          timeout: 60s
      - action: stop
        options:
          timeout: 60s
      - action: promote
        options:
          timeout: 30s
      - action: demote
        options:
          timeout: 120s
      - action: notify
        options:
          timeout: 60s
      - action: monitor
        options:
          interval: 15s
          timeout: 10s
          role: Master
      - action: monitor
        options:
          interval: 16s
          timeout: 10s
          role: Slave

- name: create master DB resource
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  pcs_resource: command=master resource_id="{{ postgres_ha_cluster_pg_HA_res_name }}" ms_name="{{ postgres_ha_cluster_pg_res_name }}" disabled=True
  args:
    options:
      master-max      : 1
      master-node-max : 1
      clone-max       : 2
      clone-node-max  : 1
      notify          : true

- name: enable database cluster resource
  shell: pcs resource enable "{{ postgres_ha_cluster_pg_HA_res_name }}" 
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node

- name: refresh database cluster resource
  shell: pcs resource cleanup "{{ postgres_ha_cluster_pg_HA_res_name }}" && pcs resource manage "{{ postgres_ha_cluster_pg_HA_res_name }}" && pcs resource clear "{{ postgres_ha_cluster_pg_HA_res_name }}"
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node

- name: setting DB location constraints
  shell: pcs constraint location "{{ postgres_ha_cluster_pg_HA_res_name }}" prefers {% for clhost in play_hosts %}{{clhost}}=100 {% endfor %}
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node

- name: check if slaves are connected
  shell: psql -Aqtc "SELECT count(*) FROM pg_stat_replication"
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  become: yes
  become_user: postgres
  register: slavecount
  vars:
    ansible_ssh_pipelining: no
  until: (slavecount.stdout|string) == ((play_hosts|length - 1)|string)
  retries: 10
  delay: 2

#- name: give time for DB resource to stabilize
#  pause: seconds=10
#
#- name: check if DB resource has failed
#  shell: pcs resource | grep '\s*postgres.*FAILED.*'
#  register: find_failure
#  failed_when: find_failure|succeeded

