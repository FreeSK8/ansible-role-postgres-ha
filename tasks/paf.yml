# vim: set filetype=yaml expandtab tabstop=2 shiftwidth=2 softtabstop=2 background=dark :

# this rpm is also available on github.. but when multiple servers start to download 
# the same file from github simultanneously, github will likely block you
# and the role will fail
# that's why it's embedded in the role
- name: copy PAF rpm to hosts
  copy: src="resource-agents-paf-2.1.0-1.noarch.rpm" dest="/tmp/resource-agents-paf-2.1.0-1.noarch.rpm"

- name: install PAF DB failover agent
  yum:
    name: "/tmp/resource-agents-paf-2.1.0-1.noarch.rpm"
    state: present

#- name: apply patches to DB failover agent
#  copy: src=pgsqlms dest=/usr/lib/ocf/resource.d/heartbeat/pgsqlms
#  args:
#    owner: root
#    group: root
#    mode:  0555

- name: prepare DB recovery config
  template: src=recovery.conf.pcmk.j2 dest="{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
  args:
    owner: postgres
    group: postgres
    mode:  0644

- name: stop database for clustering
  service: name="{{ postgres_ha_pg_systemd_svcname }}" state=stopped enabled=false

- name: create database cluster resource
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  pcs_resource: command=create resource_id="{{ postgres_ha_cluster_pg_res_name }}" type=ocf:heartbeat:pgsqlms
  args:
    disabled: True
    options:
      bindir: "{{ postgres_ha_pg_bindir }}"
      pgdata: "{{ postgres_ha_pg_data }}"
      pgport: "{{ postgres_ha_pg_port }}"
      recovery_template: "{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
    operations:
      - action: start
        options:
          timeout: 60s
      - action: stop
        options:
          timeout: 60s
      - action: promote
        options:
          timeout: 30s
      - action: demote
        options:
          timeout: 120s
      - action: notify
        options:
          timeout: 60s
      - action: monitor
        options:
          interval: 15s
          timeout: 10s
          role: Master
      - action: monitor
        options:
          interval: 16s
          timeout: 10s
          role: Slave

- name: create master DB resource
  when: inventory_hostname == "{{ postgres_ha_cluster_master_host }}"   # run only on one node
  pcs_resource: command=master resource_id="{{ postgres_ha_cluster_pg_HA_res_name }}" ms_name="{{ postgres_ha_cluster_pg_res_name }}" disabled=True
  args:
    options:
      master-max      : 1
      master-node-max : 1
      clone-max       : "{{ play_hosts|length }}"
      clone-node-max  : 1
      notify          : true

