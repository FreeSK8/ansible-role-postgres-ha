# vim: set filetype=yaml expandtab tabstop=2 shiftwidth=2 softtabstop=2 background=dark :

- debug: msg='cluster_members={{ansible_play_batch}}'
  run_once: true

- name: install cluster pkgs
  yum:
    name: pcs
    state: present

- name: install additional cluster pkgs for centos 6
  yum:
    name: '{{ item }}'
    state: present
  when: os_version == 'centos6'
  with_items:
    - pacemaker
    - libselinux-python

- name: "Build hosts file"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{ item }}" state=present
  when: hostvars[item].ansible_default_ipv4.address is defined
  with_items: "{{ ansible_play_batch }}"

- name: service pcsd start                         
  service: name=pcsd state=started enabled=yes

- name: setup hacluster password
  user:
    name: hacluster
    state: present
    update_password: always
    password: "{{ postgres_ha_cluster_ha_password_hash }}"

- name: setup cluster auth
  shell: pcs cluster auth {{ ansible_play_batch | join( " ") }} -u hacluster -p "{{ postgres_ha_cluster_ha_password }}"

# We create cluster in two steps:
# 1. create one-node cluster
# 2. join other cluster nodes (the task below)
# The reason is that we want to support adding new nodes by re-running the role.
- name: create cluster (centos7)
  #shell: pcs cluster setup --name {{ postgres_ha_cluster_name }} {{ ansible_play_batch | join( " ") }}
  shell: pcs cluster setup --name {{ postgres_ha_cluster_name }} "{{ postgres_ha_cluster_master_host }}"
  args:
    creates: /etc/corosync/corosync.conf
  when: os_version == 'centos7' and
        inventory_hostname == postgres_ha_cluster_master_host   # run only on master node

- name: create cluster (centos6)
  shell: pcs cluster setup --name {{ postgres_ha_cluster_name }} "{{ postgres_ha_cluster_master_host }}"
  args:
    creates: /etc/cluster/cluster.conf
  when: os_version == 'centos6' and
        inventory_hostname == postgres_ha_cluster_master_host    # run only on master node

- name: join cluster nodes (centos7)
  shell: /bin/sh -c "if ! grep -q 'ring0_addr[:] *{{ item }}[\t ]*$' /etc/corosync/corosync.conf; then pcs cluster node add {{ item }}; fi"
  with_items: '{{ ansible_play_batch | difference([inventory_hostname]) }}'   # all hosts except me
  when: os_version == 'centos7' and
        inventory_hostname == postgres_ha_cluster_master_host    # run only on master node

- name: join cluster nodes (centos6)
  shell: /bin/sh -c "if ! grep -q '<clusternode .*name=\"{{ item }}\"' /etc/cluster/cluster.conf; then pcs cluster node add {{ item }}; fi"
  with_items: '{{ ansible_play_batch | difference([inventory_hostname]) }}'   # all hosts except me
  when: os_version == 'centos6' and
        inventory_hostname == postgres_ha_cluster_master_host    # run only on master node

# start cluster on every node separately (can be run multiple times without failure)
- name: start cluster
  shell: pcs cluster start
  #args:
  # creates: /var/lib/pacemaker/cib/cib.xml
 
# restart corosync if needed
- meta: flush_handlers

#- name: query cluster status
#  shell: pcs cluster status
#  #register: cluster_state
#  #failed_when: True

- name: alter stonith settings
  pcs_property: name=stonith-enabled value=false
  run_once: true

- name: alter cluster policy settings
  pcs_property: name=symmetric-cluster value=false
  run_once: true

- name: alter cluster transition settings
  pcs_property: name=crmd-transition-delay value=3s
  run_once: true

- name: verify cluster configuration
  shell: crm_verify -L -V
  run_once: true

- name: enable cluster autostart
  shell: pcs cluster enable

# reload corosync if neccessary (done automatically on the end of the tasklist)
#- meta: flush_handlers

